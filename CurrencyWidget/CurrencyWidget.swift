import WidgetKit
import SwiftUI
import Intents

// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
extension View {
    @ViewBuilder
    func ifAvailable(_ version: OperatingSystemVersion, transform: (Self) -> some View) -> some View {
        if #available(iOS 17, *) {
            transform(self)
        } else {
            self
        }
    }
}

// MARK: - –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–∞

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã
struct CurrencyRate: Codable, Hashable {
    let code: String
    let name: String
    let rate: Double
    let flagEmoji: String
    
    init(code: String, name: String, rate: Double) {
        self.code = code
        self.name = name
        self.rate = rate
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º–æ–¥–∑–∏-—Ñ–ª–∞–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–¥–∞ –≤–∞–ª—é—Ç—ã
        switch code {
        case "USD": self.flagEmoji = "üá∫üá∏"
        case "EUR": self.flagEmoji = "üá™üá∫"
        case "CNY": self.flagEmoji = "üá®üá≥"
        case "TRY": self.flagEmoji = "üáπüá∑"
        case "AED": self.flagEmoji = "üá¶üá™"
        default: self.flagEmoji = "üè≥Ô∏è"
        }
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏
struct CBRResponse: Decodable {
    let Date: String
    let PreviousDate: String
    let PreviousURL: String
    let Timestamp: String
    let Valute: [String: CBRCurrency]
    
    struct CBRCurrency: Decodable {
        let ID: String
        let NumCode: String
        let CharCode: String
        let Nominal: Int
        let Name: String
        let Value: Double
        let Previous: Double
    }
}

// –ú–æ–¥–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
struct CurrencyEntry: TimelineEntry {
    let date: Date
    let rates: [CurrencyRate]
    let lastUpdated: String
}

// MARK: - –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞

struct Provider: TimelineProvider {
    // –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    func placeholder(in context: Context) -> CurrencyEntry {
        CurrencyEntry(
            date: Date(),
            rates: [
                CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 85.57),
                CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: 93.61),
                CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.65),
                CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: 23.30)
            ],
            lastUpdated: "14.03.2025, 10:00"
        )
    }
    
    // –°–Ω–∏–º–æ–∫ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ –≤–∏–¥–∂–µ—Ç–æ–≤
    func getSnapshot(in context: Context, completion: @escaping (CurrencyEntry) -> Void) {
        let entry = CurrencyEntry(
            date: Date(),
            rates: [
                CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 85.57),
                CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: 93.61),
                CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.65),
                CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: 23.30)
            ],
            lastUpdated: "14.03.2025, 10:00"
        )
        completion(entry)
    }
    
    // –¢–∞–π–º–ª–∞–π–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
    func getTimeline(in context: Context, completion: @escaping (Timeline<CurrencyEntry>) -> Void) {
        // –ó–∞–ø—Ä–æ—Å –∫ API –¶–ë –†–§
        guard let url = URL(string: "https://www.cbr-xml-daily.ru/daily_json.js") else {
            let entry = createBackupEntry()
            let timeline = Timeline(entries: [entry], policy: .after(Calendar.current.date(byAdding: .hour, value: 1, to: Date())!))
            completion(timeline)
            return
        }
        
        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö
            guard let data = data, error == nil else {
                let entry = createBackupEntry()
                let timeline = Timeline(entries: [entry], policy: .after(Calendar.current.date(byAdding: .hour, value: 1, to: Date())!))
                completion(timeline)
                return
            }
            
            // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON-–æ—Ç–≤–µ—Ç–∞
            do {
                let cbrResponse = try JSONDecoder().decode(CBRResponse.self, from: data)
                
                // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
                var rates: [CurrencyRate] = []
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–ª–∞—Ä, –µ–≤—Ä–æ, –ª–∏—Ä—É –∏ –¥–∏—Ä—Ö–∞–º
                if let usdData = cbrResponse.Valute["USD"] {
                    let usdRate = usdData.Value / Double(usdData.Nominal)
                    rates.append(CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: usdRate))
                }
                
                if let eurData = cbrResponse.Valute["EUR"] {
                    let eurRate = eurData.Value / Double(eurData.Nominal)
                    rates.append(CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: eurRate))
                }
                
                if let tryData = cbrResponse.Valute["TRY"] {
                    let tryRate = tryData.Value / Double(tryData.Nominal)
                    rates.append(CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: tryRate))
                }
                
                if let aedData = cbrResponse.Valute["AED"] {
                    let aedRate = aedData.Value / Double(aedData.Nominal)
                    rates.append(CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: aedRate))
                }
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "dd.MM.yyyy, HH:mm"
                let lastUpdated = dateFormatter.string(from: Date())
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–∞–π–º–ª–∞–π–Ω–∞
                let entry = CurrencyEntry(
                    date: Date(),
                    rates: rates,
                    lastUpdated: lastUpdated
                )
                
                // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–ª–∞–π–Ω–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å
                let nextUpdate = Calendar.current.date(byAdding: .hour, value: 1, to: Date())!
                let timeline = Timeline(entries: [entry], policy: .after(nextUpdate))
                
                completion(timeline)
                
            } catch {
                let entry = createBackupEntry()
                let timeline = Timeline(entries: [entry], policy: .after(Calendar.current.date(byAdding: .hour, value: 1, to: Date())!))
                completion(timeline)
            }
        }
        
        task.resume()
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
    private func createBackupEntry() -> CurrencyEntry {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd.MM.yyyy, HH:mm"
        
        return CurrencyEntry(
            date: Date(),
            rates: [
                CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 85.57),
                CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: 93.61),
                CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.65),
                CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: 23.30)
            ],
            lastUpdated: "\(dateFormatter.string(from: Date())) (—Ä–µ–∑–µ—Ä–≤)"
        )
    }
}

// MARK: - –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞

// –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —è—á–µ–π–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
struct CurrencyGridCell: View {
    var rate: CurrencyRate
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        VStack(spacing: 4) {
            HStack(spacing: 4) {
                Text(rate.flagEmoji)
                    .font(.system(size: 16))
                
                Text(rate.code)
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(colorScheme == .dark ? .white : .black)
            }
            
            Text(String(format: "%.2f ‚ÇΩ", rate.rate))
                .font(.system(size: 16, weight: .medium))
                .foregroundColor(colorScheme == .dark ? .white : .black)
        }
        .padding(8)
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(colorScheme == .dark ? Color(red: 0.1, green: 0.15, blue: 0.25) : Color(red: 0.9, green: 0.95, blue: 1.0))
        .cornerRadius(8)
    }
}

// –í–∏–¥–∂–µ—Ç –≤ –º–∞–ª–µ–Ω—å–∫–æ–º —Ä–∞–∑–º–µ—Ä–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª–ª–∞—Ä –∏ –µ–≤—Ä–æ)
struct CurrencyWidgetSmallView: View {
    var entry: Provider.Entry
    @Environment(\.colorScheme) var colorScheme
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è USD –∏ EUR –≤–∞–ª—é—Ç
    private func getMainCurrencies() -> [CurrencyRate] {
        let mainCodes = ["USD", "EUR"]
        let mainRates = entry.rates.filter { mainCodes.contains($0.code) }
            .sorted { mainCodes.firstIndex(of: $0.code)! < mainCodes.firstIndex(of: $1.code)! }
        return mainRates
    }
    
    var body: some View {
        VStack(spacing: 8) {
            let currencies = getMainCurrencies()
            
            // –°–µ—Ç–∫–∞ –≤–∞–ª—é—Ç 2x1
            VStack(spacing: 8) {
                ForEach(currencies, id: \.code) { rate in
                    CurrencyGridCell(rate: rate)
                }
            }
            .padding(.horizontal, 8)
            .padding(.top, 2)
            
            Spacer()
            
            // –ü–æ–¥–≤–∞–ª
            HStack {
                Spacer()
                Text("Converter")
                    .font(.system(size: 12, weight: .medium))
                    .foregroundColor(.secondary)
                Spacer()
            }
            .padding(.bottom, 5)
        }
        .edgesIgnoringSafeArea(.all)
    }
}

// –í–∏–¥–∂–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–µ—Ç–∫–æ–π 2x2
struct CurrencyWidgetMediumView: View {
    var entry: Provider.Entry
    @Environment(\.colorScheme) var colorScheme
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    private func currencyRows() -> [[CurrencyRate]] {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤–∞–ª—é—Ç: USD, EUR, TRY, AED
        let orderedCodes = ["USD", "EUR", "TRY", "AED"]
        
        // –°–æ–∑–¥–∞–µ–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        var orderedRates: [CurrencyRate] = []
        for code in orderedCodes {
            if let rate = entry.rates.first(where: { $0.code == code }) {
                orderedRates.append(rate)
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª—é–±—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –≤ orderedCodes
        for rate in entry.rates {
            if !orderedCodes.contains(rate.code) && !orderedRates.contains(where: { $0.code == rate.code }) {
                orderedRates.append(rate)
            }
        }
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
        let firstRow = Array(orderedRates.prefix(2))  // USD, EUR
        let secondRow = Array(orderedRates.dropFirst(2).prefix(2))  // TRY, AED
        
        return [firstRow, secondRow]
    }
    
    var body: some View {
        VStack(spacing: 8) {
            // –°–µ—Ç–∫–∞ –≤–∞–ª—é—Ç 2x2
            VStack(spacing: 8) {
                ForEach(currencyRows(), id: \.self) { row in
                    HStack(spacing: 8) {
                        ForEach(row, id: \.code) { rate in
                            CurrencyGridCell(rate: rate)
                        }
                    }
                    .padding(.horizontal, 8)
                }
            }
            .padding(.top, 2)
            
            Spacer()
            
            // –ü–æ–¥–≤–∞–ª
            HStack {
                Spacer()
                Text("Converter")
                    .font(.system(size: 12, weight: .medium))
                    .foregroundColor(.secondary)
                Spacer()
            }
            .padding(.bottom, 5)
        }
        .edgesIgnoringSafeArea(.all)
    }
}

// MARK: - –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞

struct CurrencyWidget: Widget {
    let kind: String = "CurrencyWidget"
    
    var body: some WidgetConfiguration {
        StaticConfiguration(kind: kind, provider: Provider()) { entry in
            Group {
                GeometryReader { geometry in
                    if geometry.size.width < 170 {
                        CurrencyWidgetSmallView(entry: entry)
                    } else {
                        CurrencyWidgetMediumView(entry: entry)
                    }
                }
            }
            // –î–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π iOS
            // –ü—Ä–∏–º–µ–Ω—è–µ–º containerBackground, –µ—Å–ª–∏ –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            .ifAvailable(OperatingSystemVersion(majorVersion: 17, minorVersion: 0, patchVersion: 0)) { view in
                view.containerBackground(for: .widget) {
                    Color.clear
                }
            }
        }
        .configurationDisplayName("–ö—É—Ä—Å –≤–∞–ª—é—Ç")
        .description("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é.")
        .supportedFamilies([.systemSmall, .systemMedium])
    }
}

// MARK: - –ü—Ä–µ–≤—å—é –≤–∏–¥–∂–µ—Ç–æ–≤

struct CurrencyWidget_Previews: PreviewProvider {
    static var previews: some View {
        let sampleEntry = CurrencyEntry(
            date: Date(),
            rates: [
                CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 85.57),
                CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: 93.61),
                CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.65),
                CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: 23.30)
            ],
            lastUpdated: "14.03.2025, 10:00"
        )
        
        Group {
            CurrencyWidgetSmallView(entry: sampleEntry)
                .previewContext(WidgetPreviewContext(family: .systemSmall))
                .previewDisplayName("–ú–∞–ª–µ–Ω—å–∫–∏–π")
                .environment(\.colorScheme, .dark)
            
            CurrencyWidgetSmallView(entry: sampleEntry)
                .previewContext(WidgetPreviewContext(family: .systemSmall))
                .previewDisplayName("–ú–∞–ª–µ–Ω—å–∫–∏–π (–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞)")
                .environment(\.colorScheme, .light)
            
            CurrencyWidgetMediumView(entry: sampleEntry)
                .previewContext(WidgetPreviewContext(family: .systemMedium))
                .previewDisplayName("–°—Ä–µ–¥–Ω–∏–π")
                .environment(\.colorScheme, .dark)
            
            CurrencyWidgetMediumView(entry: sampleEntry)
                .previewContext(WidgetPreviewContext(family: .systemMedium))
                .previewDisplayName("–°—Ä–µ–¥–Ω–∏–π (–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞)")
                .environment(\.colorScheme, .light)
        }
    }
}
