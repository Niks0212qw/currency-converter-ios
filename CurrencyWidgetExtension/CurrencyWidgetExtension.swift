import SwiftUI
import WidgetKit

// MARK: - –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API –≤–∞–ª—é—Ç
struct ExchangeRatesResponse: Codable {
    let result: String
    let base_code: String
    let time_last_update_unix: Int
    let rates: [String: Double]
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤–∞–ª—é—Ç—ã –≤ –≤–∏–¥–∂–µ—Ç–µ
struct CurrencyWidgetItem: Identifiable, Hashable {
    var id = UUID()
    var code: String
    var name: String
    var rate: Double
    var flagEmoji: String
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init(from appCurrency: Currency, rate: Double) {
        self.code = appCurrency.code
        self.name = appCurrency.name
        self.rate = rate
        self.flagEmoji = appCurrency.flagEmoji
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    init(code: String, name: String, rate: Double, flagEmoji: String) {
        self.code = code
        self.name = name
        self.rate = rate
        self.flagEmoji = flagEmoji
    }
}

// MARK: - Provider –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞

struct Provider: TimelineProvider {
    func placeholder(in context: Context) -> CurrencyWidgetEntry {
        CurrencyWidgetEntry(date: Date(), currencies: getPreviewCurrencies())
    }
    
    func getSnapshot(in context: Context, completion: @escaping (CurrencyWidgetEntry) -> Void) {
        // –î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if context.isPreview {
            let entry = CurrencyWidgetEntry(date: Date(), currencies: getPreviewCurrencies())
            completion(entry)
            return
        }
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        fetchExchangeRates { currencies in
            let entry = CurrencyWidgetEntry(date: Date(), currencies: currencies)
            completion(entry)
        }
    }
    
    func getTimeline(in context: Context, completion: @escaping (Timeline<CurrencyWidgetEntry>) -> Void) {
        fetchExchangeRates { currencies in
            let entry = CurrencyWidgetEntry(date: Date(), currencies: currencies)
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
            let nextUpdateDate = Calendar.current.date(byAdding: .hour, value: 1, to: Date()) ?? Date()
            let timeline = Timeline(entries: [entry], policy: .after(nextUpdateDate))
            
            completion(timeline)
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ API
    private func fetchExchangeRates(completion: @escaping ([CurrencyWidgetItem]) -> Void) {
        guard let url = URL(string: "https://open.er-api.com/v6/latest/RUB") else {
            completion(getPreviewCurrencies())
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            guard error == nil, let data = data else {
                completion(getPreviewCurrencies())
                return
            }
            
            do {
                let ratesResponse = try JSONDecoder().decode(ExchangeRatesResponse.self, from: data)
                
                // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
                var widgetCurrencies: [CurrencyWidgetItem] = []
                
                // –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–∂–µ—Ç–µ
                let favoriteCurrencyCodes = ["USD", "EUR", "CNY", "TRY", "KZT"]
                
                for code in favoriteCurrencyCodes {
                    if let rate = ratesResponse.rates[code], code != "RUB" {
                        // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å, —Ç–∞–∫ –∫–∞–∫ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
                        let invertedRate = 1.0 / rate
                        
                        let currency = CurrencyWidgetItem(
                            code: code,
                            name: getCurrencyName(for: code),
                            rate: invertedRate,
                            flagEmoji: getCurrencyFlag(for: code)
                        )
                        widgetCurrencies.append(currency)
                    }
                }
                
                completion(widgetCurrencies)
                
            } catch {
                completion(getPreviewCurrencies())
            }
        }.resume()
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ –∫–æ–¥—É
    private func getCurrencyName(for code: String) -> String {
        switch code {
        case "RUB": return "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å"
        case "USD": return "–î–æ–ª–ª–∞—Ä –°–®–ê"
        case "EUR": return "–ï–≤—Ä–æ"
        case "TRY": return "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞"
        case "KZT": return "–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ"
        case "CNY": return "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å"
        case "AED": return "–î–∏—Ä—Ö–∞–º –û–ê–≠"
        case "UZS": return "–£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º"
        case "BYN": return "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å"
        case "THB": return "–¢–∞–∏–ª–∞–Ω–¥—Å–∫–∏–π –±–∞—Ç"
        case "UAH": return "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞"
        case "GBP": return "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç"
        case "JPY": return "–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞"
        default: return code
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –≤–∞–ª—é—Ç—ã –ø–æ –∫–æ–¥—É
    private func getCurrencyFlag(for code: String) -> String {
        switch code {
        case "RUB": return "üá∑üá∫"
        case "USD": return "üá∫üá∏"
        case "EUR": return "üá™üá∫"
        case "TRY": return "üáπüá∑"
        case "KZT": return "üá∞üáø"
        case "CNY": return "üá®üá≥"
        case "AED": return "üá¶üá™"
        case "UZS": return "üá∫üáø"
        case "BYN": return "üáßüáæ"
        case "THB": return "üáπüá≠"
        case "UAH": return "üá∫üá¶"
        case "GBP": return "üá¨üáß"
        case "JPY": return "üáØüáµ"
        default: return "üè≥Ô∏è"
        }
    }
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    private func getPreviewCurrencies() -> [CurrencyWidgetItem] {
        return [
            CurrencyWidgetItem(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 93.5, flagEmoji: "üá∫üá∏"),
            CurrencyWidgetItem(code: "EUR", name: "–ï–≤—Ä–æ", rate: 100.2, flagEmoji: "üá™üá∫"),
            CurrencyWidgetItem(code: "CNY", name: "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", rate: 12.8, flagEmoji: "üá®üá≥"),
            CurrencyWidgetItem(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.8, flagEmoji: "üáπüá∑"),
            CurrencyWidgetItem(code: "KZT", name: "–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ", rate: 0.2, flagEmoji: "üá∞üáø")
        ]
    }
}

// MARK: - –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞

struct CurrencyWidgetEntry: TimelineEntry {
    let date: Date
    let currencies: [CurrencyWidgetItem]
}

// MARK: - –ú–∞–ª–µ–Ω—å–∫–∏–π –≤–∏–¥–∂–µ—Ç

struct CurrencySmallWidgetView: View {
    var entry: Provider.Entry
    
    var body: some View {
        VStack(spacing: 8) {
            HStack {
                Text("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
                    .font(.headline)
                    .foregroundColor(.white)
                
                Spacer()
                
                Text("‚ÇΩ")
                    .font(.headline)
                    .foregroundColor(.yellow)
            }
            .padding(.horizontal, 12)
            .padding(.top, 12)
            
            Divider()
                .background(Color.gray.opacity(0.3))
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤–∞–ª—é—Ç—ã –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
            ForEach(Array(entry.currencies.prefix(3))) { currency in
                HStack {
                    Text(currency.flagEmoji)
                        .font(.subheadline)
                    
                    Text(currency.code)
                        .font(.subheadline)
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Text(String(format: "%.2f", currency.rate))
                        .font(.subheadline)
                        .foregroundColor(.white)
                }
                .padding(.horizontal, 12)
            }
            
            Spacer()
            
            Text("–û–±–Ω–æ–≤–ª–µ–Ω–æ: \(formattedDate(entry.date))")
                .font(.caption2)
                .foregroundColor(.gray)
                .padding(.bottom, 8)
        }
        .background(
            LinearGradient(
                gradient: Gradient(colors: [Color(UIColor.darkGray), Color.black]),
                startPoint: .top,
                endPoint: .bottom
            )
        )
    }
    
    private func formattedDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm"
        return formatter.string(from: date)
    }
}

// MARK: - –°—Ä–µ–¥–Ω–∏–π –≤–∏–¥–∂–µ—Ç

struct CurrencyMediumWidgetView: View {
    var entry: Provider.Entry
    
    var body: some View {
        VStack(spacing: 6) {
            HStack {
                Text("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é")
                    .font(.headline)
                    .foregroundColor(.white)
                
                Spacer()
                
                Text("‚ÇΩ")
                    .font(.headline)
                    .foregroundColor(.yellow)
            }
            .padding(.horizontal, 16)
            .padding(.top, 12)
            
            Divider()
                .background(Color.gray.opacity(0.3))
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã
            ForEach(entry.currencies) { currency in
                HStack {
                    Text(currency.flagEmoji)
                        .font(.system(size: 16))
                    
                    Text(currency.code)
                        .font(.subheadline)
                        .fontWeight(.medium)
                        .foregroundColor(.white)
                    
                    Text(currency.name)
                        .font(.caption)
                        .foregroundColor(.gray)
                        .lineLimit(1)
                    
                    Spacer()
                    
                    Text(String(format: "%.2f", currency.rate))
                        .font(.subheadline)
                        .fontWeight(.medium)
                        .foregroundColor(.white)
                }
                .padding(.horizontal, 16)
                .padding(.vertical, 2)
            }
            
            Spacer()
            
            Text("–û–±–Ω–æ–≤–ª–µ–Ω–æ: \(formattedDate(entry.date))")
                .font(.caption2)
                .foregroundColor(.gray)
                .padding(.bottom, 8)
        }
        .background(
            LinearGradient(
                gradient: Gradient(colors: [Color(UIColor.darkGray), Color.black]),
                startPoint: .top,
                endPoint: .bottom
            )
        )
    }
    
    private func formattedDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM, HH:mm"
        return formatter.string(from: date)
    }
}

// MARK: - –ë–æ–ª—å—à–æ–π –≤–∏–¥–∂–µ—Ç

struct CurrencyLargeWidgetView: View {
    var entry: Provider.Entry
    
    var body: some View {
        VStack {
            HStack {
                Text("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é")
                    .font(.title3)
                    .fontWeight(.bold)
                    .foregroundColor(.white)
                
                Spacer()
                
                Text("‚ÇΩ")
                    .font(.title3)
                    .foregroundColor(.yellow)
            }
            .padding(.horizontal, 20)
            .padding(.top, 20)
            
            Divider()
                .background(Color.gray.opacity(0.3))
                .padding(.horizontal, 20)
            
            // Grid –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª—é—Ç
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: 16) {
                ForEach(entry.currencies) { currency in
                    CurrencyCard(currency: currency)
                }
            }
            .padding(.horizontal, 16)
            .padding(.top, 10)
            
            Spacer()
            
            HStack {
                Spacer()
                Text("–û–±–Ω–æ–≤–ª–µ–Ω–æ: \(formattedDate(entry.date))")
                    .font(.caption)
                    .foregroundColor(.gray)
                    .padding(.bottom, 12)
            }
            .padding(.horizontal, 20)
        }
        .background(
            LinearGradient(
                gradient: Gradient(colors: [Color(UIColor.darkGray), Color.black]),
                startPoint: .top,
                endPoint: .bottom
            )
        )
    }
    
    private func formattedDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yyyy, HH:mm"
        return formatter.string(from: date)
    }
}

// –ö–∞—Ä—Ç–æ—á–∫–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
struct CurrencyCard: View {
    var currency: CurrencyWidgetItem
    
    var body: some View {
        VStack(alignment: .leading, spacing: 6) {
            HStack {
                Text(currency.flagEmoji)
                    .font(.title3)
                
                Text(currency.code)
                    .font(.headline)
                    .foregroundColor(.white)
                
                Spacer()
            }
            
            Text(currency.name)
                .font(.caption)
                .foregroundColor(.gray)
                .lineLimit(1)
            
            Spacer()
            
            Text(String(format: "%.2f ‚ÇΩ", currency.rate))
                .font(.title3)
                .fontWeight(.bold)
                .foregroundColor(.white)
        }
        .padding()
        .frame(height: 120)
        .background(Color(UIColor.darkGray).opacity(0.5))
        .cornerRadius(12)
    }
}

// MARK: - –í–∏–¥–∂–µ—Ç

struct CurrencyWidget: Widget {
    let kind: String = "CurrencyWidget"
    
    var body: some WidgetConfiguration {
        StaticConfiguration(kind: kind, provider: Provider()) { entry in
            CurrencyWidgetEntryView(entry: entry)
        }
        .configurationDisplayName("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
        .description("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é")
        .supportedFamilies([.systemSmall, .systemMedium, .systemLarge])
    }
}

struct CurrencyWidgetEntryView: View {
    @Environment(\.widgetFamily) var family
    var entry: Provider.Entry
    
    var body: some View {
        switch family {
        case .systemSmall:
            CurrencySmallWidgetView(entry: entry)
        case .systemMedium:
            CurrencyMediumWidgetView(entry: entry)
        case .systemLarge:
            CurrencyLargeWidgetView(entry: entry)
        @unknown default:
            CurrencyMediumWidgetView(entry: entry)
        }
    }
}

// MARK: - –ü—Ä–µ–≤—å—é

struct CurrencyWidget_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            CurrencyWidgetEntryView(entry: CurrencyWidgetEntry(date: Date(), currencies: [
                CurrencyWidgetItem(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 93.5, flagEmoji: "üá∫üá∏"),
                CurrencyWidgetItem(code: "EUR", name: "–ï–≤—Ä–æ", rate: 100.2, flagEmoji: "üá™üá∫"),
                CurrencyWidgetItem(code: "CNY", name: "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", rate: 12.8, flagEmoji: "üá®üá≥"),
                CurrencyWidgetItem(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.8, flagEmoji: "üáπüá∑"),
                CurrencyWidgetItem(code: "KZT", name: "–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ", rate: 0.2, flagEmoji: "üá∞üáø")
            ]))
            .previewContext(WidgetPreviewContext(family: .systemSmall))
            .preferredColorScheme(.dark)
            
            CurrencyWidgetEntryView(entry: CurrencyWidgetEntry(date: Date(), currencies: [
                CurrencyWidgetItem(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 93.5, flagEmoji: "üá∫üá∏"),
                CurrencyWidgetItem(code: "EUR", name: "–ï–≤—Ä–æ", rate: 100.2, flagEmoji: "üá™üá∫"),
                CurrencyWidgetItem(code: "CNY", name: "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", rate: 12.8, flagEmoji: "üá®üá≥"),
                CurrencyWidgetItem(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.8, flagEmoji: "üáπüá∑"),
                CurrencyWidgetItem(code: "KZT", name: "–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ", rate: 0.2, flagEmoji: "üá∞üáø")
            ]))
            .previewContext(WidgetPreviewContext(family: .systemMedium))
            .preferredColorScheme(.dark)
            
            CurrencyWidgetEntryView(entry: CurrencyWidgetEntry(date: Date(), currencies: [
                CurrencyWidgetItem(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 93.5, flagEmoji: "üá∫üá∏"),
                CurrencyWidgetItem(code: "EUR", name: "–ï–≤—Ä–æ", rate: 100.2, flagEmoji: "üá™üá∫"),
                CurrencyWidgetItem(code: "CNY", name: "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", rate: 12.8, flagEmoji: "üá®üá≥"),
                CurrencyWidgetItem(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.8, flagEmoji: "üáπüá∑"),
                CurrencyWidgetItem(code: "KZT", name: "–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ", rate: 0.2, flagEmoji: "üá∞üáø")
            ]))
            .previewContext(WidgetPreviewContext(family: .systemLarge))
            .preferredColorScheme(.dark)
        }
    }
}
